package plic.analyse ;

import java.util.*;
import plic.arbre.* ;
import plic.tds.*;
import plic.arbre.expression.* ;
import plic.arbre.declaration.*;
import plic.exceptions.*;

import java_cup.runtime.*;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;        
        lesTerminaux.put(new Integer(CodesLexicaux.EGAL), "=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINT), ".") ;
        lesTerminaux.put(new Integer(CodesLexicaux.VIRGULE), ",") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;
        lesTerminaux.put(new Integer(CodesLexicaux.CLASS), "classe") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.WRITE), "ecrire") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SI), "si") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ALORS), "alors") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SINON), "sinon") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FSI), "fsi") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NOUVEAU), "nouveau");
        
        

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PLUS, MOINS, MULT, DIV, PAROUV, PARFER , POINTVIRGULE, VIRGULE, POINT;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON, EGAL ;
terminal String    CONSTANTEINT, CONSTANTEBOOL, IDF,PRIVEE,PUBLIQUE,ENTIER,DEBUT,FIN,CLASS, WRITE, CONSTANTECHAINE, SI, ALORS , SINON, FSI, NOUVEAU;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG;
non terminal Expression EXPR, CSTE;
non terminal String TYPE, STATUT;
non terminal Ecrire ECRIRE;
non terminal Declaration DECL_CHAMP, DECL_CONST, DECLARATION;
non terminal Instruction INSTRUCTION;
non terminal Affectation AFFECT;
non terminal ListeDeclaration LDECL;
non terminal Classe CLASSE;
non terminal Acces ACCES;
non terminal ListeIdf LIDF;
non terminal ListeInstruction LINSTR;
non terminal ListeClasse LCLASSE;
non terminal Condition CONDITION;
non terminal DeclarationVar DECL_VAR;
non terminal Instanciation INSTANCIATION;
non terminal Parametre PARAMETRE;
non terminal ListeParametre LPARAMETRE;
non terminal ArrayList<Expression> LEXP;


precedence left INF, SUP ;
precedence left EGALEGAL, DIFF, EGAL;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left OU ;
precedence left ET ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::= 	LCLASSE:lc
         		{: BlocDInstructions arbre = new BlocDInstructions(lcleft+1) ;
                   arbre.ajouter(lc) ;
                   TDS.getInstance().setListeClasse(lc);
                   RESULT = arbre ; :}         
                ;
                
                
LCLASSE ::= 	LCLASSE:lc CLASSE:c
				{:
					boolean existe = false;
					for(Classe cl : lc.getListeClasse()){
						if(cl.getIdf().equals(c.getIdf())){
							existe = true;
						}
					}
					if(existe){
						throw new DoubleDeclarationException("La classe "+c.getIdf()+" a deja ete declare",cleft+1);
					}
					lc.ajouter(c);
					RESULT = lc;
				:}
				|
				CLASSE:c
				{:
					ListeClasse lc = new ListeClasse(cleft+1);
					lc.ajouter(c);
					RESULT = lc;
				:}
				;                
          
CLASSE ::=		CLASS IDF:i LDECL:l FIN
				{: 	TDS.getInstance().entreeBloc();
					TDS.getInstance().setBlocCourant(TDS.getInstance().getCompteur());
					Classe c = new Classe(ileft+1,i,l);	
					RESULT = c ;
					:}
				|
				CLASS IDF:i FIN
				{: 	
					TDS.getInstance().entreeBloc();
					TDS.getInstance().setBlocCourant(TDS.getInstance().getCompteur());
					Classe c = new Classe(ileft+1,i,null);	
					RESULT = c ;
					:}
				;		
				
INSTANCIATION ::= ACCES:a EGAL NOUVEAU IDF:i PAROUV PARFER POINTVIRGULE	
					{:
						Idf idf = new Idf(ileft+1,i);
						RESULT = new Instanciation(null,aleft+1,a,idf,0);
					:}
					|
					ACCES:a EGAL NOUVEAU IDF:i PAROUV LEXP:li PARFER POINTVIRGULE	
					{:
						Idf idf = new Idf(ileft+1,i);
						RESULT = new Instanciation(li,aleft+1,a,idf,0);
					:}
					;			
				
				
LDECL ::=		LDECL:l DECLARATION:d
				{: 	l.ajouter(d);
				RESULT = l; :}
		|
				DECLARATION:d 
         		{: ListeDeclaration ld = new ListeDeclaration(dleft+1);
                   ld.ajouter(d) ;
                   RESULT = ld ; :}        

                ;
				
				
				
DECLARATION ::= DECL_CHAMP:d
				{: RESULT = d; :}
				| 
				DECL_CONST:dc
				{: RESULT = dc; :}
				;

DECL_CHAMP ::= 	STATUT:s TYPE:t LIDF:li POINTVIRGULE
				{:	
					RESULT = new DeclarationChamp(t,s,sleft+1,li, 0);
				:}
				;
				
							
				
LIDF	::=		LIDF:l VIRGULE IDF:i
				{: 	l.ajouter(new Idf(ileft+1,i));
				RESULT = l; :}
				
		|
				IDF:i
				{: ListeIdf li = new ListeIdf(ileft+1);
                   li.ajouter(new Idf(ileft+1,i)) ;
                   RESULT = li ; :}         
                ;
                
LINSTR 	::=		LINSTR:l INSTRUCTION:i
				{:	l.ajouter(i);
					RESULT = l; :}
		|
				INSTRUCTION:i
				{: ListeInstruction li = new ListeInstruction(ileft+1);
					li.ajouter(i);
					RESULT = li; :}
				;
					
				
STATUT 	::= 	PUBLIQUE:p 
				{:
				RESULT = p; :}
				|
				 PRIVEE:p
				{: RESULT = p; :}
				;

TYPE 	::= 	ENTIER:e 
				{: RESULT = e; :}
				|
				IDF:i
				{: RESULT = i; :}
				;
				
DECL_CONST ::= 	STATUT:s IDF:i PAROUV  PARFER DEBUT LINSTR:l FIN
				{: 
					RESULT = new DeclarationConst(null,lleft+1,l,i, 0); 
				:}
				|
				STATUT:s IDF:i PAROUV PARFER DEBUT FIN
				{: 
					RESULT = new DeclarationConst(null,ileft+1,null,i, 0); 
					
				:}
				|
				STATUT:s IDF:i PAROUV LPARAMETRE:lp PARFER DEBUT LINSTR:l FIN
				{: 
					RESULT = new DeclarationConst(lp,lleft+1,l,i, 0); 
				:}
				|
				STATUT:s IDF:i PAROUV LPARAMETRE:lp PARFER DEBUT FIN
				{: 
					RESULT = new DeclarationConst(lp,ileft+1,null,i, 0); 
					
				:}
			;
			
PARAMETRE ::=	TYPE:t IDF:i
				{:
					RESULT = new Parametre(t,i);
				:}
				;
				
LPARAMETRE ::= 	LPARAMETRE:l VIRGULE PARAMETRE:p
				{:	l.ajouter(p);
					RESULT = l; :}
		|
				PARAMETRE:p
				{: ListeParametre lp = new ListeParametre();
					lp.ajouter(p);
					RESULT = lp; :}
				;
			
DECL_VAR ::=	TYPE:t LIDF:li POINTVIRGULE
				{:
					RESULT = new DeclarationVar(t,lileft+1,li, 0);
				:}
				;
				
CONDITION ::=	SI EXPR:e ALORS LINSTR:li SINON LINSTR:sli FSI
				{:
					Condition c = new Condition(eleft+1,e,li,sli, 0);
					RESULT = c;
				:}
			|
				SI EXPR:e ALORS SINON LINSTR:sli FSI
				{:
					Condition c = new Condition(eleft+1,e,null,sli, 0);
					RESULT = c;
				:}
			|
				SI EXPR:e ALORS LINSTR:li FSI
				{:
					Condition c = new Condition(eleft+1,e,li,null, 0);
					RESULT = c;
				:}
			|
				SI EXPR:e ALORS FSI
				{:
					Condition c = new Condition(eleft+1,e,null,null, 0);
					RESULT = c;
				:}
				;

INSTRUCTION ::= AFFECT:a
				{:
					RESULT = a;
				:}	
			|
				ECRIRE:e
				{: 
				RESULT = e;
				:}	
			|
				CONDITION:c
				{:
				RESULT=c;
				:}	
			|
				DECL_VAR:d
				{:
				RESULT=d;
				:}	
			| 
				INSTANCIATION:i
				{:
				RESULT = i;
				:}			
				;
				
AFFECT 		::= ACCES:a EGAL EXPR:e POINTVIRGULE
				{:
					Affectation af = new Affectation(aleft+1,a,e, 0);
					RESULT = af;
				:}
				;
				
				
				
ACCES	::=		IDF:i
				{:	
					Idf idf = new Idf(ileft+1,i);
					Acces a = new Acces(ileft+1,idf,null);
					RESULT = a ;
				:}	
				|
				IDF:i POINT IDF:j
				{:	
					Idf idf = new Idf(ileft+1,i);
					Idf idf2 = new Idf(jleft+1,j);
					Acces a = new Acces(ileft+1,idf,idf2);
					RESULT = a ;
				:}			
				;
				
ECRIRE 	::=		WRITE:w EXPR:e POINTVIRGULE 
				{: Ecrire ec = new Ecrire(eleft+1,e, 0);
					
				RESULT = ec; :}
				|
				WRITE:w CONSTANTECHAINE:c POINTVIRGULE
				{: Ecrire ec = new Ecrire(cleft+1,c, 0);
				
				RESULT = ec; :}
				;
    
LEXP ::= LEXP:l VIRGULE EXPR:e
				{:	l.add(e);
					RESULT = l; :}
		|
				EXPR:e
				{: ArrayList<Expression> lp = new ArrayList<Expression>();
					lp.add(e);
					RESULT = lp; :}
				;
    
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
                CSTE:c
                {: RESULT = c ; :}
        |
        		IDF:i
        		{: RESULT = new Idf(ileft+1,i); :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
                ;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1) ; :}
                ;